{"ast":null,"code":"var _jsxFileName = \"/home/mohamed/Desktop/projects/oxycare/src/utils/loadable.tsx\";\nimport React, { lazy, Suspense } from 'react';\nexport const lazyLoad = (importFunc, selectorFunc, opts = {\n  fallback: null\n}) => {\n  let lazyFactory = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () => importFunc().then(module => ({\n      default: selectorFunc(module)\n    }));\n  }\n\n  const LazyComponent = /*#__PURE__*/lazy(lazyFactory);\n  return props => /*#__PURE__*/React.createElement(Suspense, {\n    fallback: opts.fallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LazyComponent, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n};","map":{"version":3,"sources":["/home/mohamed/Desktop/projects/oxycare/src/utils/loadable.tsx"],"names":["React","lazy","Suspense","lazyLoad","importFunc","selectorFunc","opts","fallback","lazyFactory","then","module","default","LazyComponent","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AAOA,OAAO,MAAMC,QAAQ,GAAG,CAItBC,UAJsB,EAKtBC,YALsB,EAMtBC,IAAU,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CANS,KAOnB;AACH,MAAIC,WAA0C,GAAGJ,UAAjD;;AAEA,MAAIC,YAAJ,EAAkB;AAChBG,IAAAA,WAAW,GAAG,MACZJ,UAAU,GAAGK,IAAb,CAAkBC,MAAM,KAAK;AAAEC,MAAAA,OAAO,EAAEN,YAAY,CAACK,MAAD;AAAvB,KAAL,CAAxB,CADF;AAED;;AAED,QAAME,aAAa,gBAAGX,IAAI,CAACO,WAAD,CAA1B;AAEA,SAAQK,KAAD,iBACL,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEP,IAAI,CAACC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD,oBAAmBM,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CAtBM","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\ninterface Opts {\n  fallback: React.ReactNode;\n}\ntype Unpromisify<T> = T extends Promise<infer P> ? P : never;\n\nexport const lazyLoad = <\n  T extends Promise<any>,\n  U extends React.ComponentType<any>\n>(\n  importFunc: () => T,\n  selectorFunc?: (s: Unpromisify<T>) => U,\n  opts: Opts = { fallback: null },\n) => {\n  let lazyFactory: () => Promise<{ default: U }> = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () =>\n      importFunc().then(module => ({ default: selectorFunc(module) }));\n  }\n\n  const LazyComponent = lazy(lazyFactory);\n\n  return (props: React.ComponentProps<U>): JSX.Element => (\n    <Suspense fallback={opts.fallback!}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}